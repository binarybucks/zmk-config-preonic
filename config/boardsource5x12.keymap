/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
 
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define LOWER   1
#define ADJUST   2
#define MACRO     3
#define ISODE     4
#define ISODESPECIAL     5

#define DE_SLASH        LS(N7)
#define DE_QUESTION     LS(MINUS)
#define DE_LT    	NON_US_BACKSLASH
#define DE_MT    	LS(DE_LT)

#define DE_COLON    	LS(DOT)
#define DE_SEMICOLON    LS(COMMA)
#define DE_OE    	SEMICOLON
#define DE_AE    	SINGLE_QUOTE
#define DE_UE    	LEFT_BRACKET
#define DE_PLUS    	RIGHT_BRACKET
#define DE_SS    	MINUS
#define DE_BACKSLASH    RA(MINUS)
#define DE_MINUS        SLASH
#define DE_EQUAL        LS(N0)
#define DE_UNDERSCORE   LS(SLASH)
#define DE_PIPE		RA(NON_US_BACKSLASH)

#define DE_EXCL 	LS(N1)
#define DE_QUOTEDOUBLE 	LS(N2)
#define DE_HASH 	BACKSLASH
#define DE_QUOTESINGLE 	LS(BACKSLASH)
#define DE_USD		LS(N4)
#define DE_PERCT	LS(N5)
#define DE_CRRT		GRAVE
#define DE_AMPST	RS(N6)
#define DE_ASRSK	RS(DE_PLUS)
#define DE_BRL_RND	RS(N8)	
#define DE_BRL_CRL	RA(N7)	
#define DE_BRL_SQR	RA(N8)	
#define DE_BRR_RND	LS(N9)
#define DE_BRR_CRL	RA(N0)	
#define DE_BRR_SQR   	RA(N9)	
#define DE_BACKTICK    	EQUAL	
#define DE_TILDE    	RA(DE_PLUS)	
#define DE_AT    	RA(Q)	


#define str(s) #s

#define MOD_MORPH_NOSHIFT_MACRO(NAME, KEY, MOD_KEY) \
ZMK_MACRO(macro_##NAME,\
   wait-ms = <16>;\
   tap-ms = <0>;\
   bindings\
   = <&macro_release &kp LSHFT>\
   , <&macro_tap &kp MOD_KEY>\
   , <&macro_press &kp LSHFT>;)\
\
mm_##NAME: mm_##NAME {\
   compatible = "zmk,behavior-mod-morph";\
   label = str(NAME);\
   #binding-cells = <0>;\
   bindings = <&kp KEY>, <&macro_##NAME>;\
   mods = <(MOD_LSFT|MOD_RSFT)>;\
}; \

#define MOD_MORPH(NAME, KEY, MOD_KEY) \
  mm_##NAME: mm_##NAME { \
    compatible = "zmk,behavior-mod-morph"; \
    label = str(NAME); \
    #binding-cells = <0>; \
    bindings = <&kp KEY>, <&kp MOD_KEY>; \
    mods = <(MOD_LSFT|MOD_RSFT)>; \
  }; \

#define MM_MASKEDLSHIFT(NAME, KEY, MOD_KEY) \
  mmms_##NAME: mmms_##NAME { \
    compatible = "zmk,behavior-mod-morph"; \
    label = str(NAME); \
    #binding-cells = <0>; \
    bindings = <&kp KEY>, <&kp MOD_KEY>; \
    mods = <(MOD_LSFT)>; \
    masked_mods = <(MOD_LSFT)>; \
  }; \

#define MM_NOMASKEDLSHIFT(NAME, KEY, MOD_KEY) \
  mmms_##NAME: mmms_##NAME { \
    compatible = "zmk,behavior-mod-morph"; \
    label = str(NAME); \
    #binding-cells = <0>; \
    bindings = <&kp KEY>, <&kp MOD_KEY>; \
    mods = <(MOD_LSFT)>; \
    masked_mods = <0>; \
  }; \



/ {

	behaviors {
		
		mmnew_dot: mmnew_dot {
        		compatible = "zmk,behavior-mod-morph";
        		label = "mmnew_dot";
        		#binding-cells = <0>;
        		bindings = <&kp DOT>, <&kp DE_LT>;
        		mods = <(MOD_LSFT)>;
			masked_mods = <0>; //dont mask LSFT for More Than 
    		};
		
		mmnew_comma: mmnew_comma {
        		compatible = "zmk,behavior-mod-morph";
        		label = "mmnew_comma";
        		#binding-cells = <0>;
        		bindings = <&kp COMMA>, <&kp DE_LT>;
        		mods = <(MOD_LSFT)>;
        		masked_mods = <(MOD_LSFT)>; 
    		};
		
		mmnew_slash: mmnew_slash {
        		compatible = "zmk,behavior-mod-morph";
        		label = "mmnew_slash";
        		#binding-cells = <0>;
        		bindings = <&kp DE_SLASH>, <&kp MINUS>;
        		mods = <(MOD_LSFT)>;
			masked_mods = <0>; //dont mask LSFT for Questionmark
    		};
		
				
		mmnew_semi: mmnew_semi {
        		compatible = "zmk,behavior-mod-morph";
        		label = "mmnew_semi";
        		#binding-cells = <0>;
        		bindings = <&kp DE_SEMICOLON>, <&kp DOT>;
        		mods = <(MOD_LSFT)>;
			masked_mods = <0>; //dont mask LSFT for Dot
    		};
		
		mmnew_pipe: mmnew_pipe {
        		compatible = "zmk,behavior-mod-morph";
        		label = "mmnew_pipe";
        		#binding-cells = <0>;
        		bindings = <&kp DE_PIPE>, <&kp DE_BACKSLASH>;
        		mods = <(MOD_LSFT)>;
        		masked_mods = <(MOD_LSFT)>; 
    		};
		
		

		 MM_MASKEDLSHIFT(comma, COMMA, DE_LT)
		 MM_MASKEDLSHIFT(slash, DE_SLASH, DE_QUESTION)
		 MM_MASKEDLSHIFT(semicolon, DE_SEMICOLON, DE_COLON)
		 MM_MASKEDLSHIFT(pipe, DE_PIPE, DE_BACKSLASH)

		 MM_MASKEDLSHIFT(minus, DE_MINUS, DE_UNDERSCORE)
		 MM_MASKEDLSHIFT(equal, DE_EQUAL, DE_PLUS)
		 MM_MASKEDLSHIFT(quotesingle, DE_QUOTESINGLE, DE_BACKTICK)

		 
		 MM_MASKEDLSHIFT(1, N1, DE_EXCL)
		 MM_MASKEDLSHIFT(2, N2, DE_QUOTEDOUBLE)
		 MM_MASKEDLSHIFT(3, N3, DE_HASH)
		 MM_MASKEDLSHIFT(4, N4, DE_USD)
		 MM_MASKEDLSHIFT(5, N5, DE_PERCT)
		 MM_MASKEDLSHIFT(6, N6, DE_CRRT)
		 MM_MASKEDLSHIFT(7, N7, DE_AMPST)
		 MM_MASKEDLSHIFT(8, N8, DE_ASRSK)
		 MM_MASKEDLSHIFT(9, N9, DE_BRL_RND)
		 MM_MASKEDLSHIFT(0, N0, DE_BRR_RND)
		 MM_MASKEDLSHIFT(brl,DE_BRL_SQR, DE_BRL_CRL)
		 MM_MASKEDLSHIFT(brr,DE_BRR_SQR, DE_BRR_CRL)

	
		
  		ZMK_MACRO(nfmt,
		wait-ms = <0>;
		tap-ms = <0>;
		bindings
		= <&macro_tap &kp DE_BRL_CRL &kp N &kp O &kp F &kp O &kp R &kp M &kp A &kp T &kp DE_BRR_CRL >
		;)
		
		ZMK_MACRO(mail,
		wait-ms = <0>;
		tap-ms = <0>;
		bindings
		= <&macro_tap &kp A &kp L &kp E &kp X &kp A &kp N &kp D &kp E &kp R &kp DOT &kp K &kp L &kp A &kp U &kp T &kp K &kp E &kp DE_AT &kp S &kp V &kp A &kp DOT &kp D &kp E >
		;)
		
		
		


	

	
	};


    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------
            // |   1   |  2   |  3   |  4   |  5   |   6   |  7    |  8   |  9   |  0   |   -   |  +    |
            // | TAB   |  Q   |  W   |  E   |  R   |  T   |   Z   |  U    |  I   |  O   |   P   |  BS   |
            // | ESC   |  A   |  S   |  D   |  F   |  G   |   H   |  J    |  K   |  L   |   ;   |  ENT  |
            // | SHIFT |  Y   |  X   |  C   |  V   |  B   |   N   |  M    |  ,   |  .   |  /    | SHIFT |
            // | CTRL  | GUI  | ALT  | MCRO | LWR | SPACE| SPACE |  LOWR | RALT | PGUP | PGDN  | DEL   |


            bindings = <
                &mmms_1    &mmms_2      &mmms_3     &mmms_4  &mmms_5    &mmms_6     &mmms_7     &mmms_8 &mmms_9     &mmms_0     &mmms_minus      &mmms_equal 
                &kp TAB    &kp Q        &kp W       &kp E    &kp R      &kp T       &kp Y       &kp U   &kp I       &kp O       &kp P          &kp BSPC
                &kp ESC    &kp A        &kp S       &kp D    &kp F      &kp G       &kp H       &kp J   &kp K       &kp L       &mmnew_semi  &kp RET
                &kp LSHFT  &kp Z        &kp X       &kp C    &kp V      &kp B       &kp N       &kp M   &mmnew_comma &mmnew_dot &mmnew_slash      &mo ISODE
                &kp LCTRL  &kp LGUI     &kp LALT    &mo MACRO &mo LOWER &kp SPACE  &kp SPACE    &mo LOWER &kp RALT  &kp PG_UP   &kp PG_DN      &kp DEL 
            >;
        };

        lower_layer {
            // -------------------------------------------------------------------------------------------
            // |       |      |      |      |      |      |       |       |      |[ {   | } ]   |       |
            // |       |      |      |      |      |      |       |       |      |      | PSCRN |       |
            // |       |      |      |      |      |      |   L   |  D    |  U   |  R   |       |       |
            // |       |      |      |      |      |      |  ~    |      |      | | \   |       |
            // |       |      |      |      |      |      |       |       |      |      |       |       |
            bindings = <
                &none     &mmms_quotesingle     &none    &none    &none      &none    &none     &none      &mmms_brl   &mmms_brr   &none      &trans
                &trans    &none     &none    &none    &none      &none    &none     &kp DE_UE  &none    &kp DE_OE  &kp PSCRN  &trans
                &trans    &kp DE_AE &kp DE_SS &none    &none      &none    &kp LEFT  &kp DOWN   &kp UP   &kp RIGHT  &none      &trans
                &trans    &bootloader &reset   &none    &none      &none    &kp DE_TILDE     &none      &none    &none      &mmnew_pipe  &none
                &trans    &trans    &trans   &mo ISODE   &mo ADJUST &trans   &trans    &mo ADJUST &trans   &trans     &trans     &trans 
            >;
        };

        adjust_layer {
            // ------------------------------------------------------------------------------------------
            // |NA    |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA |    NA      |
            // |      |  NA  |  NA  |  NA  |RESET |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |   NA      |
            // |      |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |   NA      |
            // |      |  NA  |  NA  |  NA  |  NA  |BT CLR|  NA  |  NA  |  NA  |  NA  |  NA  |   NA      |
            // |      |      |      |      |      |BOOTLD|BOOTLD|      |      |      |      |           |
            bindings = <
                &none  &none  &none  &none  &none  &none         &none       &none  &none  &none  &none  &none
                &trans &none  &none  &none  &reset &none         &none       &none  &none  &none  &none  &none
                &trans &none  &none  &none  &none  &none         &none       &none  &none  &none  &none  &none
                &trans &none  &none  &none  &none  &bt BT_CLR    &none       &none  &none  &none  &none  &none
                &trans &trans &trans &trans &trans &bootloader   &bootloader &trans &trans &trans &trans &trans
            >;
        };
        macro_layer {
            // ------------------------------------------------------------------------------------------
            // |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA |    NA      |
            // |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |   NA      |
            // |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |   NA      |
            // |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |   NA      |
            // |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |   NA      |
            bindings = <
                &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none
                &none  &mail  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none
                &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none
                &none  &none  &none  &none  &none  &none  &nfmt  &none  &none  &none  &none  &none
                &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none
            >;
        };
        isode_layer {
            // ------------------------------------------------------------------------------------------
            // |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA |    NA      |
            // |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |   NA      |
            // |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |   NA      |
            // |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |   NA      |
            // |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |   NA      |
            bindings = <
                &kp N1     &kp N2       &kp N3      &kp N4   &kp N5     &kp N6      &kp N7      &kp N8     &kp N9       &kp N0       &none           &none 
                &trans     &trans       &trans      &trans   &trans     &trans      &trans      &trans     &trans       &trans       &trans          &trans
                &trans     &trans       &trans      &trans   &trans     &trans	    &trans      &trans     &trans       &trans       &none   	     &trans
                &trans     &trans       &trans      &trans   &trans     &trans      &trans      &trans     &trans       &trans       &none           &mo ISODE
                &trans     &trans       &trans      &none    &none      &trans      &trans     &none	   &trans       &trans       &trans          &trans 
            >;
        };
        isodespecial_layer {
            // ------------------------------------------------------------------------------------------
            // |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA |    NA      |
            // |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |   NA      |
            // |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |   NA      |
            // |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |   NA      |
            // |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |   NA      |
            bindings = <
                &trans     &none        &none       &none    &none      &none       &none       &none      &none        &none        &none           &trans
                &trans     &none        &none       &none    &none      &none       &none       &none      &none        &none        &none           &trans
                &trans     &none        &none       &none    &none      &none 	    &none       &none      &none        &none        &none           &trans
                &trans     &none        &none       &none    &none      &none       &none       &none      &none        &none        &none           &none
                &trans     &trans       &trans      &none    &none      &trans      &trans      &none	   &trans       &trans       &trans          &trans 
            >;
        };


    };
};
